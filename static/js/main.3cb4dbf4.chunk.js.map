{"version":3,"sources":["components/header.js","components/addTask.js","components/tasklist.js","components/about.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Component","AddTask","state","taskTitle","id","isComplete","changeHandler","event","setState","target","value","onSubmit","e","preventDefault","props","addTask","this","type","onChange","placeholder","TaskList","taskTitles","map","task","key","name","taskDone","style","textDecoration","onClick","taskDelete","About","App","shortid","generate","push","forceUpdate","taskID","selectedElem","filter","restofElement","path","exact","render","Fragment","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cb4dbf4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport class Header extends Component {\n  render() {\n    return (\n      <div className=\"bg-dark container pt-5 pb-2 text-white\">\n        <h3 className=\"mb-5\">Todo List Project</h3>\n        <div className=\"nav d-flex justify-content-center\">\n          <Link to=\"/\">\n            <span className=\"text-white nav-link active\">Home</span>\n          </Link>\n          <Link to=\"/about\">\n            <span className=\"text-white nav-link\">About</span>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nexport class AddTask extends Component {\n  state = {\n    taskTitle: \"\",\n    id: \"\",\n    isComplete: false\n  };\n\n  changeHandler = event => {\n    this.setState({ taskTitle: event.target.value });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.props.addTask(this.state);\n    this.setState({\n      taskTitle: \"\",\n      id: \"\",\n      isComplete: false\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container mt-2\">\n        <form className=\"form form-inline\" onSubmit={this.onSubmit}>\n          <input\n            className=\"form-element col\"\n            type=\"text\"\n            value={this.state.taskTitle}\n            onChange={this.changeHandler}\n            placeholder=\"Add Task ...\"\n          />\n          <input\n            type=\"submit\"\n            value=\"Submit\"\n            className=\"btn btn-dark text-white col-3 p-1 ml-2\"\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default AddTask;\n","import React, { Component } from \"react\";\n\nexport class TaskList extends Component {\n  render() {\n    return this.props.taskTitles.map(task => (\n      <tr key={task.id}>\n        <td className=\"\">\n          <input\n            type=\"checkbox\"\n            name=\"complete\"\n            id={task.id}\n            onChange={e => {\n              this.props.taskDone(e.target.id);\n            }}\n          />\n        </td>\n        <td className=\"d-flex justify-content-start\">\n          <label\n            style={\n              task.isComplete\n                ? { textDecoration: \"line-through\" }\n                : { textDecoration: \"none\" }\n            }\n          >\n            {task.taskTitle}\n          </label>\n        </td>\n        <td className=\"\">\n          <button\n            type=\"button\"\n            id={task.id}\n            className=\"btn btn-danger\"\n            onClick={e => this.props.taskDelete(e.target.id)}\n          >\n            x\n          </button>\n        </td>\n      </tr>\n    ));\n  }\n}\n\nexport default TaskList;\n","import React, { Component } from \"react\";\n\nexport class About extends Component {\n  render() {\n    return (\n      <div className=\"container bg-light text-dark p-5 d-flex justify-content-center\">\n        <h3>This is About Page</h3>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from \"react\";\nimport Header from \"./components/header\";\nimport AddTask from \"./components/addTask\";\nimport TaskList from \"./components/tasklist\";\nimport shortid from \"shortid\";\nimport \"./App.css\";\nimport About from \"./components/about\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nexport class App extends Component {\n  state = {\n    taskTitles: []\n  };\n\n  //add task into state\n  addTask = task => {\n    task.id = shortid.generate();\n    this.state.taskTitles.push(task);\n    this.forceUpdate();\n  };\n\n  //complete task\n  taskDone = taskID => {\n    const selectedElem = this.state.taskTitles.filter(\n      task => taskID === task.id\n    );\n    selectedElem[0].isComplete = !selectedElem[0].isComplete;\n    this.forceUpdate();\n  };\n\n  //delete task\n  taskDelete = taskID => {\n    const restofElement = this.state.taskTitles.filter(\n      task => taskID !== task.id\n    );\n    this.setState({ taskTitles: restofElement });\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header />\n          <Route path=\"/\" exact\n            render={props => (\n              <React.Fragment>\n                <AddTask addTask={this.addTask} />\n                <table className=\"table mt-5 container\">\n                  <tbody>\n                    <TaskList\n                      taskTitles={this.state.taskTitles}\n                      taskDone={this.taskDone}\n                      taskDelete={this.taskDelete}\n                    />\n                  </tbody>\n                </table>\n              </React.Fragment>\n            )}\n          />\n        </div>\n        <Route path=\"/about\" exact component={About} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}